{
  "html": [
    {
      "id": 1,
      "text": "Какой тег используется для создания ссылки?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<link>", "isCorrect": false },
        { "id": 2, "text": "<a>", "isCorrect": true },
        { "id": 3, "text": "<href>", "isCorrect": false },
        { "id": 4, "text": "<anchor>", "isCorrect": false }
      ]
    },
    {
      "id": 2,
      "text": "Какой тег используется для вставки изображения?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<img>", "isCorrect": true },
        { "id": 2, "text": "<picture>", "isCorrect": false },
        { "id": 3, "text": "<media>", "isCorrect": false },
        { "id": 4, "text": "<graphic>", "isCorrect": false }
      ]
    },
    {
      "id": 3,
      "text": "Какой тег находится в <html> определяет заголовок документа?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<head>", "isCorrect": true },
        { "id": 2, "text": "<header>", "isCorrect": false },
        { "id": 3, "text": "<title>", "isCorrect": false },
        { "id": 4, "text": "<meta>", "isCorrect": false }
      ]
    },
    {
      "id": 4,
      "text": "Какой атрибут используется для определения альтернативного текста изображения?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "src", "isCorrect": false },
        { "id": 2, "text": "alt", "isCorrect": true },
        { "id": 3, "text": "title", "isCorrect": false },
        { "id": 4, "text": "href", "isCorrect": false }
      ]
    },
    {
      "id": 5,
      "text": "Какой атрибут позволяет открыть ссылку в новой вкладке?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "target=_blank", "isCorrect": true },
        { "id": 2, "text": "target=blank", "isCorrect": false },
        { "id": 3, "text": "target=_self", "isCorrect": false },
        { "id": 4, "text": "target=_new", "isCorrect": false }
      ]
    },
    {
      "id": 6,
      "text": "Для чего используется атрибут 'placeholder'?",
      "hasOptions": false,
      "answer": "Атрибут 'placeholder' используется для отображения текстовой подсказки или примера ввода в поле формы до того, как пользователь начнет вводить свои данные."
    },
    {
      "id": 7,
      "text": "Как создать непронумерованный список в HTML?",
      "hasOptions": false,
      "answer": "Для создания такого списка в HTML используется тег <code>ul</code>, а для определения каждого пункта списка - тег <code>li</code>."
    },
    {
      "id": 8,
      "text": "Что такое HTML?",
      "hasOptions": false,
      "answer": "HTML (HyperText Markup Language) - это стандартизированный язык разметки, который используется для создания и разработки веб-страниц. Это система для разметки отдельных частей веб-страницы с использованием тегов, заключенных в угловые скобки."
    },
    {
      "id": 9,
      "text": "Что делает тег <!DOCTYPE>?",
      "hasOptions": false,
      "answer": "`Это декларация, которая информирует веб-браузер о версии языка разметки, использованной при создании веб-страницы. Это помогает браузеру корректно отобразить страницу."
    },
    {
      "id": 10,
      "text": "Какой тег используется для создания таблицы?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<table>", "isCorrect": true },
        { "id": 2, "text": "<grid>", "isCorrect": false },
        { "id": 3, "text": "<row>", "isCorrect": false },
        { "id": 4, "text": "<column>", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Какой тег используется для создания заголовка таблицы?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<caption>", "isCorrect": false },
        { "id": 2, "text": "<th>", "isCorrect": false },
        { "id": 3, "text": "<thead>", "isCorrect": true },
        { "id": 4, "text": "<title>", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Какой тег используется для создания строки таблицы?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<td>", "isCorrect": false },
        { "id": 2, "text": "<row>", "isCorrect": false },
        { "id": 3, "text": "<line>", "isCorrect": false },
        { "id": 4, "text": "<tr>", "isCorrect": true }
      ]
    },
    {
      "id": 13,
      "text": "Какой тег используется для создания ячейки таблицы?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<cell>", "isCorrect": false },
        { "id": 2, "text": "<tr>", "isCorrect": false },
        { "id": 3, "text": "<th>", "isCorrect": false },
        { "id": 4, "text": "<td>", "isCorrect": true }
      ]
    },
    {
      "id": 14,
      "text": "Что такое семантические теги в HTML?",
      "hasOptions": false,
      "answer": "Семантические теги в HTML - это теги, которые передают информацию о смысле или назначении содержимого, а не только о его внешнем виде. Примеры семантических тегов: header, footer, article, section, nav и др. Они помогают создавать более структурированные и доступные веб-страницы."
    },
    {
      "id": 15,
      "text": "Какой атрибут используется для установки фонового изображения?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "background", "isCorrect": false },
        { "id": 2, "text": "background-color", "isCorrect": false },
        { "id": 3, "text": "bgcolor", "isCorrect": false },
        { "id": 4, "text": "background-image", "isCorrect": true }
      ]
    },
    {
      "id": 16,
      "text": "Какой тег используется для создания выпадающего списка?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<dropdown>", "isCorrect": false },
        { "id": 2, "text": "<list>", "isCorrect": false },
        { "id": 3, "text": "<select>", "isCorrect": true },
        { "id": 4, "text": "<option>", "isCorrect": false }
      ]
    },
    {
      "id": 17,
      "text": "Какой тег используется для вставки JavaScript кода в HTML документ?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<javascript>", "isCorrect": false },
        { "id": 2, "text": "<script>", "isCorrect": true },
        { "id": 3, "text": "<js>", "isCorrect": false },
        { "id": 4, "text": "<java>", "isCorrect": false }
      ]
    },
    {
      "id": 18,
      "text": "Какой атрибут используется для указания пути к изображению?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "src", "isCorrect": true },
        { "id": 2, "text": "href", "isCorrect": false },
        { "id": 3, "text": "path", "isCorrect": false },
        { "id": 4, "text": "url", "isCorrect": false }
      ]
    },
    {
      "id": 19,
      "text": "Что делает атрибут 'readonly' в элементе формы?",
      "hasOptions": false,
      "answer": "Атрибут 'readonly' делает элемент формы только для чтения, что значит, что пользователь не может изменять значение элемента, но может просматривать его. Это может быть полезно, если вы хотите отобразить информацию, которая не должна быть изменена."
    },
    {
      "id": 20,
      "text": "Что такое веб-стандарты и зачем они нужны?",
      "hasOptions": false,
      "answer": "Веб-стандарты - это рекомендации, разработанные группами стандартов, такими как W3C или WHATWG, для обеспечения совместимости и устойчивости веб-технологий. Они включают рекомендации по HTML, CSS, JavaScript и другим веб-технологиям. Соблюдение веб-стандартов помогает обеспечить корректную работу веб-страниц в различных браузерах и устройствах, а также облегчить обслуживание и расширение веб-сайтов в будущем."
    },
    {
      "id": 21,
      "text": "Что такое отзывчивый (responsive) веб-дизайн?",
      "hasOptions": false,
      "answer": "Это подход к веб-дизайну, который позволяет веб-страницам корректно отображаться и функционировать на различных устройствах, включая мобильные телефоны, планшеты и настольные компьютеры, путем использования гибких макетов, гибких изображений и CSS медиазапросов для адаптации дизайна к различным размерам экрана и характеристикам устройств."
    },
    {
      "id": 22,
      "text": "Какой тег HTML используется для вставки видео?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<media>", "isCorrect": false },
        { "id": 2, "text": "<video>", "isCorrect": true },
        { "id": 3, "text": "<movie>", "isCorrect": false },
        { "id": 4, "text": "<multimedia>", "isCorrect": false }
      ]
    },
    {
      "id": 23,
      "text": "Какой тег используется для создания главного заголовка на веб-странице?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<h1>", "isCorrect": true },
        { "id": 2, "text": "<header>", "isCorrect": false },
        { "id": 3, "text": "<title>", "isCorrect": false },
        { "id": 4, "text": "<head>", "isCorrect": false }
      ]
    },
    {
      "id": 24,
      "text": "Что делает тег <br>?",
      "hasOptions": false,
      "answer": "Он спользуется для переноса строки, что позволяет создать новую строку в том месте, где он размещен. Это удобный способ управления расположением текста на веб-странице без использования дополнительных стилей или элементов."
    },
    {
      "id": 25,
      "text": "Какой тег используется для создания упорядоченного списка?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<ul>", "isCorrect": false },
        { "id": 2, "text": "<ol>", "isCorrect": true },
        { "id": 3, "text": "<li>", "isCorrect": false },
        { "id": 4, "text": "<list>", "isCorrect": false }
      ]
    },
    {
      "id": 26,
      "text": "Что такое DOM в контексте веб-разработки?",
      "hasOptions": false,
      "answer": "DOM (Document Object Model) - это программный интерфейс для веб-документов. Это представление структурированного документа в виде объектной модели, которое позволяет программам и скриптам взаимодействовать с содержимым, структурой и стилями веб-страницы. DOM представляет документ как дерево объектов, каждый из которых соответствует части страницы."
    },
    {
      "id": 27,
      "text": "Какой атрибут используется для определения стилей элемента на странице?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "style", "isCorrect": true },
        { "id": 2, "text": "css", "isCorrect": false },
        { "id": 3, "text": "styles", "isCorrect": false },
        { "id": 4, "text": "stylesheet", "isCorrect": false }
      ]
    },
    {
      "id": 28,
      "text": "Что такое атрибут 'alt' в теге <img>?",
      "hasOptions": false,
      "answer": "Он используется для предоставления альтернативного текста, который будет отображаться в случае, если изображение не может быть загружено. Это также может быть полезно для обеспечения доступности, поскольку скрин-ридеры могут использовать этот текст для описания изображения пользователям с ограниченными возможностями."
    }
  ],
  "css": [
    {
      "id": 1,
      "text": "В чем разница между «сбросом» и «нормализацией» CSS? Что бы вы выбрали и почему?",
      "hasOptions": false,
      "answer": "Сброс (reset) сбрасывает все встроенные в браузер стили элементов. Normalize приводит стили к единому виду во всех браузерах. Лучше использовать Normalize из-за кроссбраузерности."
    },
    {
      "id": 2,
      "text": "Что такое специфичность селекторов CSS и как она работает?",
      "hasOptions": false,
      "answer": "Специфичность селектора (еще называют весом) это свойство определяющее приоритет стилевого правила, то есть то, какой стиль будет применен к HTML элементу в итоге. Например, используя какую-нибудь UI библиотеку, элементам этой библиотеки будут применены правила заданные авторами по умолчанию. При необходимости можно поменять стили на свои, «перебив» дефолтные более специфичным селектором.\n\nПодробнее тут: <a href='https://developer.mozilla.org/ru/docs/Web/CSS/Specificity' target='_blank'>Специфичность (MDN)</a>"
    },
    {
      "id": 3,
      "text": "Что такое CSS?",
      "hasOptions": false,
      "answer": "CSS (Cascading Style Sheets) - это язык стилей, используемый для описания внешнего вида и форматирования документа, написанного на языке разметки, таком как HTML. CSS позволяет разработчикам управлять макетом, шрифтами, цветами и другими стилистическими аспектами веб-страницы."
    },
    {
      "id": 4,
      "text": "Почему, как правило, лучше разместить подключение CSS в <head>, а <script> перед тэгом </body>? Знаете ли вы какие-либо исключения, приведите примеры?",
      "hasOptions": false,
      "answer": "Стили рекомендуется подключать в head для того, чтобы страница как можно быстрее приняла свой внешний вид. Скрипты подключенные в head могут затормозить этот процесс, в связи с этим их рекомендуется подключать перед закрывающим тегом body. Исключением являются скрипты аналитики, для определения количества посетителей, которые не дождались загрузки страницы. В этом случае скрипт должен быть подключен в head."
    },
    {
      "id": 5,
      "text": "Что делает свойство 'z-index' в CSS?",
      "hasOptions": false,
      "answer": "Свойство 'z-index' в CSS контролирует стековый порядок элементов по оси Z. Элемент с большим значением 'z-index' будет отображаться поверх элемента с меньшим значением 'z-index'."
    },
    {
      "id": 6,
      "text": "Какие есть способы отцентровать div?",
      "hasOptions": false,
      "answer": "Существует несколько способов отцентровать div в CSS, вот некоторые из них: \n1. Использование свойств margin и auto: `margin: 0 auto;`.\n2. Использование Flexbox: `display: flex; justify-content: center; align-items: center;`.\n3. Использование Grid Layout: `display: grid; place-items: center;`.\n4. Использование свойств text-align и inline-block: `text-align: center;` на родительском элементе и `display: inline-block;` на самом div.`."
    },
    {
      "id": 7,
      "text": "Какое свойство используется для установки цвета фона?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "color", "isCorrect": false },
        { "id": 2, "text": "background-color", "isCorrect": true },
        { "id": 3, "text": "bgcolor", "isCorrect": false },
        { "id": 4, "text": "background", "isCorrect": false }
      ]
    },
    {
      "id": 8,
      "text": "Какое свойство позволяет установить внешние отступы элемента?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "padding", "isCorrect": false },
        { "id": 2, "text": "border", "isCorrect": false },
        { "id": 3, "text": "margin", "isCorrect": true },
        { "id": 4, "text": "spacing", "isCorrect": false }
      ]
    },
    {
      "id": 9,
      "text": "Какое свойство используется для установки шрифта?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "font-weight", "isCorrect": false },
        { "id": 2, "text": "font-style", "isCorrect": false },
        { "id": 3, "text": "text-font", "isCorrect": false },
        { "id": 4, "text": "font-family", "isCorrect": true }
      ]
    },
    {
      "id": 10,
      "text": "Какое свойство CSS позволяет контролировать видимость элемента в DOM, но при этом сохраняет его место?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "display: none", "isCorrect": false },
        { "id": 2, "text": "visibility: hidden", "isCorrect": true },
        { "id": 3, "text": "is-visible: 0", "isCorrect": false },
        { "id": 4, "text": "color: transparent", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Какое свойство CSS используется для установки теней элементов?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "box-shadow", "isCorrect": true },
        { "id": 2, "text": "text-shadow", "isCorrect": false },
        { "id": 3, "text": "shadow", "isCorrect": false },
        { "id": 4, "text": "border-shadow", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Какой селектор выбирает все элементы .child, которые являются непосредственными дочерними элементами .parent?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": ".parent + .child", "isCorrect": false },
        { "id": 2, "text": ".parent ~ .child", "isCorrect": false },
        { "id": 3, "text": ".parent > .child", "isCorrect": true },
        { "id": 4, "text": ".parent .child", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Какой селектор CSS выбирает все элементы, которые имеют указанный атрибут, начинающийся с определенной строки?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "[attr=value]", "isCorrect": false },
        { "id": 2, "text": "[attr~=value]", "isCorrect": false },
        { "id": 3, "text": "[attr|=value]", "isCorrect": false },
        { "id": 4, "text": "[attr^=value]", "isCorrect": true }
      ]
    },
    {
      "id": 14,
      "text": "Какой селектор CSS выбирает все элементы, которые имеют указанный атрибут, заканчивающийся определенной строкой?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "[attr=value]", "isCorrect": false },
        { "id": 2, "text": "[attr~=value]", "isCorrect": false },
        { "id": 3, "text": "[attr|=value]", "isCorrect": false },
        { "id": 4, "text": "[attr$=value]", "isCorrect": true }
      ]
    }
  ],
  "javascript": [
    {
      "id": 1,
      "text": "Что такое чистая функция?",
      "hasOptions": false,
      "answer": "Это функция, которая возвращает одинаковый результат, когда вызывается с одним и тем же набором аргументов, а также не имеет побочных эффектов (side effects)"
    },
    {
      "id": 2,
      "text": "Что такое замыкание?",
      "hasOptions": false,
      "answer": "Замыкания – это способность функции запоминать лексическое окружение, в котором она была создана, то есть хранить в себе ссылку на это окружение и обращаться к нему.\n\n<a href='https://youtu.be/mI6Jcfsgma4?si=46DV3mXPF6mDTTPs' target='_blank'>Подробнейшее видео про замыкание</a>"
    },
    {
      "id": 3,
      "text": "let VS const: почему лучше использовать const, когда это возможно?",
      "hasOptions": false,
      "answer": "Использование const дает два преимущества:\n1) Безопасность: объявление переменных через const защищает от неожиданного изменения значения переменной в коде, что может часто приводит к ошибкам и неожиданному поведению программы.\n2) Читаемость: использование const позволяет читателю кода понимать, что значение переменной не будет изменяться в течение выполнения программы. Это делает код более понятным и уменьшает возможность ошибок.\n\nПодробнее: <a href='https://youtu.be/07FllcTRj84?si=q7v60ZvHYBoRSSen' target='_blank'>Видео про VAR/LET/CONST</a>"
    },
    {
      "id": 4,
      "text": "Что такое промисы (Promises) в JavaScript?",
      "hasOptions": false,
      "answer": "Промисы – это объекты, которые представляют результат асинхронной операции. Они могут находиться в одном из трех состояний: ожидание (pending), выполнено (fulfilled) или отклонено (rejected)."
    },
    {
      "id": 5,
      "text": "Что такое деструктуризация в JavaScript?",
      "hasOptions": false,
      "answer": "Деструктуризация позволяет извлекать отдельные свойства из объектов или элементы из массивов и присваивать их переменным в более удобной форме. Например, вот так мы можем одной строкой извлечь имя и адрес пользователя из объекта user:\n<code>const {name, address} = user;</code>"
    },
    {
      "id": 6,
      "text": "Что такое стрелочные функции в JavaScript?",
      "hasOptions": false,
      "answer": "Стрелочные функции — это синтаксически компактный способ записи функций в JavaScript, который не имеет своего собственного 'this'. Они часто используются для создания анонимных функций.\n\n<a href='https://youtu.be/nGVYdna4kq4?si=1k0J9F-MYxWCaq6M' target='_blank'>Подробное видео про функции в JS</a>"
    },
    {
      "id": 7,
      "text": "Что такое hoisting в JavaScript?",
      "hasOptions": false,
      "answer": "Hoisting — это механизм в JavaScript, при котором переменные и объявления функций перемещаются на верх своей области видимости перед выполнением кода."
    },
    {
      "id": 8,
      "text": "Какой метод используется для добавления элемента в массив?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "splice()", "isCorrect": false },
        { "id": 2, "text": "pop()", "isCorrect": false },
        { "id": 3, "text": "shift()", "isCorrect": false },
        { "id": 4, "text": "push()", "isCorrect": true }
      ]
    },
    {
      "id": 9,
      "text": "Какой объект представляет текущее окно браузера?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "document", "isCorrect": false },
        { "id": 2, "text": "screen", "isCorrect": false },
        { "id": 3, "text": "window", "isCorrect": true },
        { "id": 4, "text": "browser", "isCorrect": false }
      ]
    },
    {
      "id": 10,
      "text": "Какой оператор используется для сравнения на строгое равенство?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "==", "isCorrect": false },
        { "id": 2, "text": "===", "isCorrect": true },
        { "id": 3, "text": "=", "isCorrect": false },
        { "id": 4, "text": "!==", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Какой метод используется для удаления последнего элемента из массива?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "splice()", "isCorrect": false },
        { "id": 2, "text": "pop()", "isCorrect": true },
        { "id": 3, "text": "shift()", "isCorrect": false },
        { "id": 4, "text": "push()", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Какой метод в JavaScript используется для преобразования объекта в строку JSON?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "JSON.stringify()", "isCorrect": true },
        { "id": 2, "text": "JSON.parse()", "isCorrect": false },
        { "id": 3, "text": "JSON.toText()", "isCorrect": false },
        { "id": 4, "text": "JSON.toString()", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Какой объект в JavaScript используется для работы с датой и временем?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Time", "isCorrect": false },
        { "id": 2, "text": "Date", "isCorrect": true },
        { "id": 3, "text": "Calendar", "isCorrect": false },
        { "id": 4, "text": "DateTime", "isCorrect": false }
      ]
    },
    {
      "id": 14,
      "text": "Какой метод массива в JavaScript используется для фильтрации элементов по определенному критерию?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "map()", "isCorrect": false },
        { "id": 2, "text": "filter()", "isCorrect": true },
        { "id": 3, "text": "reduce()", "isCorrect": false },
        { "id": 4, "text": "forEach()", "isCorrect": false }
      ]
    },
    {
      "id": 15,
      "text": "Что выведет выражение: console.log(typeof null)?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "'null'", "isCorrect": false },
        { "id": 2, "text": "'object'", "isCorrect": true },
        { "id": 3, "text": "'undefined'", "isCorrect": false },
        { "id": 4, "text": "'number'", "isCorrect": false }
      ]
    },
    {
      "id": 16,
      "text": "Что такое замыкание (closure) в JavaScript?",
      "hasOptions": false,
      "answer": "Замыкание — это функция, которая запоминает своё лексическое окружение даже после того, как внешняя функция завершила выполнение."
    },
    {
      "id": 17,
      "text": "Чему равен результат 0.1 + 0.2 == 0.3?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "true", "isCorrect": false },
        { "id": 2, "text": "false", "isCorrect": true },
        { "id": 3, "text": "undefined", "isCorrect": false },
        { "id": 4, "text": "NaN", "isCorrect": false }
      ]
    },
    {
      "id": 18,
      "text": "Какое значение вернёт typeof NaN?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "'NaN'", "isCorrect": false },
        { "id": 2, "text": "'number'", "isCorrect": true },
        { "id": 3, "text": "'undefined'", "isCorrect": false },
        { "id": 4, "text": "'object'", "isCorrect": false }
      ]
    },
    {
      "id": 19,
      "text": "Что делает оператор '==='?",
      "hasOptions": false,
      "answer": "Проверяет равенство без приведения типов (строгое сравнение)."
    },
    {
      "id": 20,
      "text": "Что произойдет, если вызвать функцию перед её объявлением с помощью function declaration?",
      "hasOptions": false,
      "answer": "Она выполнится, так как объявления функций поднимаются (hoisting)."
    },
    {
      "id": 21,
      "text": "Что делает метод Array.prototype.map()?",
      "hasOptions": false,
      "answer": "Создаёт новый массив, применяя переданную функцию к каждому элементу исходного массива."
    },
    {
      "id": 22,
      "text": "Как удалить последний элемент массива?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "arr.pop()", "isCorrect": true },
        { "id": 2, "text": "arr.shift()", "isCorrect": false },
        { "id": 3, "text": "arr.remove()", "isCorrect": false },
        { "id": 4, "text": "delete arr[-1]", "isCorrect": false }
      ]
    },
    {
      "id": 23,
      "text": "Что делает метод 'Array.prototype.filter()'?",
      "hasOptions": false,
      "answer": "Возвращает новый массив с элементами, которые прошли проверку функции-предиката."
    },
    {
      "id": 24,
      "text": "Как проверить, является ли переменная массивом?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "typeof arr === 'array'", "isCorrect": false },
        { "id": 2, "text": "Array.isArray(arr)", "isCorrect": true },
        { "id": 3, "text": "arr instanceof Object", "isCorrect": false },
        { "id": 4, "text": "arr.type === 'array'", "isCorrect": false }
      ]
    },
    {
      "id": 25,
      "text": "Что делает метод 'Object.keys()'?",
      "hasOptions": false,
      "answer": "Возвращает массив всех ключей (имен свойств) объекта."
    },
    {
      "id": 26,
      "text": "Что такое промис (Promise)?",
      "hasOptions": false,
      "answer": "Промис — это объект, представляющий результат асинхронной операции, который может находиться в одном из трёх состояний: pending, fulfilled или rejected."
    },
    {
      "id": 27,
      "text": "Какой метод используется для обработки успешного выполнения промиса?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": ".finally()", "isCorrect": false },
        { "id": 2, "text": ".then()", "isCorrect": true },
        { "id": 3, "text": ".catch()", "isCorrect": false },
        { "id": 4, "text": ".done()", "isCorrect": false }
      ]
    },
    {
      "id": 28,
      "text": "Что делает оператор 'spread' (...) ?",
      "hasOptions": false,
      "answer": "Разворачивает массив или объект в месте, где ожидаются отдельные элементы или ключи."
    },
    {
      "id": 29,
      "text": "Что делает метод 'JSON.stringify()'?",
      "hasOptions": false,
      "answer": "Преобразует объект JavaScript в строку формата JSON."
    },
    {
      "id": 30,
      "text": "Как остановить выполнение цикла for?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "exit", "isCorrect": false },
        { "id": 2, "text": "stop", "isCorrect": false },
        { "id": 3, "text": "break", "isCorrect": true },
        { "id": 4, "text": "cancel", "isCorrect": false }
      ]
    },
    {
      "id": 31,
      "text": "Что делает метод 'setTimeout'?",
      "hasOptions": false,
      "answer": "Запускает выполнение функции через заданное время (в миллисекундах)."
    },
    {
      "id": 32,
      "text": "Как объединить два массива в один?",
      "hasOptions": false,
      "answer": "С помощью [...arr1, ...arr2] или arr1.concat(arr2)."
    },
    {
      "id": 33,
      "text": "Что вернёт выражение Boolean('0')?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "false", "isCorrect": false },
        { "id": 2, "text": "true", "isCorrect": true },
        { "id": 3, "text": "undefined", "isCorrect": false },
        { "id": 4, "text": "null", "isCorrect": false }
      ]
    },
    {
      "id": 34,
      "text": "Что делает оператор 'typeof'?",
      "hasOptions": false,
      "answer": "Возвращает тип переданного значения в виде строки."
    },
    {
      "id": 35,
      "text": "Что произойдёт, если вызвать промис без обработчика .catch() при ошибке?",
      "hasOptions": false,
      "answer": "Произойдёт необработанное отклонение (UnhandledPromiseRejection), которое может вызвать ошибку в консоли."
    },
    {
      "id": 36,
      "text": "Как скопировать объект без ссылки на оригинал?",
      "hasOptions": false,
      "answer": "Можно использовать spread (...obj) или structuredClone(obj)."
    },
    {
      "id": 37,
      "text": "Что делает метод 'bind()'?",
      "hasOptions": false,
      "answer": "Создаёт новую функцию с привязанным контекстом this."
    },
    {
      "id": 38,
      "text": "Какой результат у выражения [] == ![] ?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "true", "isCorrect": true },
        { "id": 2, "text": "false", "isCorrect": false },
        { "id": 3, "text": "undefined", "isCorrect": false },
        { "id": 4, "text": "TypeError", "isCorrect": false }
      ]
    },
    {
      "id": 39,
      "text": "Что делает оператор '??' (nullish coalescing)?",
      "hasOptions": false,
      "answer": "Возвращает правый операнд, если левый равен null или undefined."
    },
    {
      "id": 40,
      "text": "Что такое 'this' в стрелочной функции?",
      "hasOptions": false,
      "answer": "В стрелочных функциях 'this' не имеет собственного контекста и берётся из внешней области видимости."
    },
    {
      "id": 41,
      "text": "Что делает метод 'reduce()'?",
      "hasOptions": false,
      "answer": "Последовательно сводит элементы массива к одному значению, используя функцию-аккумулятор."
    },
    {
      "id": 42,
      "text": "Чем отличается 'var' от 'let'?",
      "hasOptions": false,
      "answer": "Переменные с var имеют функциональную область видимости и поднимаются; let — блочную область видимости."
    },
    {
      "id": 43,
      "text": "Как проверить, существует ли свойство в объекте?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "'key' in obj", "isCorrect": true },
        { "id": 2, "text": "obj.contains(key)", "isCorrect": false },
        { "id": 3, "text": "obj.has(key)", "isCorrect": false },
        { "id": 4, "text": "obj[key] != undefined", "isCorrect": false }
      ]
    },
    {
      "id": 44,
      "text": "Что делает оператор 'delete'?",
      "hasOptions": false,
      "answer": "Удаляет свойство из объекта."
    },
    {
      "id": 45,
      "text": "Что делает метод 'Promise.all()'?",
      "hasOptions": false,
      "answer": "Ожидает выполнения всех промисов и возвращает массив их результатов или ошибку, если хоть один отклонён."
    },
    {
      "id": 46,
      "text": "Что такое 'event loop'?",
      "hasOptions": false,
      "answer": "Это механизм JavaScript, который управляет выполнением синхронного и асинхронного кода через очередь событий."
    },
    {
      "id": 47,
      "text": "Что делает оператор 'instanceof'?",
      "hasOptions": false,
      "answer": "Проверяет, принадлежит ли объект указанному классу или его прототипу."
    },
    {
      "id": 48,
      "text": "Как преобразовать строку в число?",
      "hasOptions": false,
      "answer": "С помощью Number(str), +str или parseInt(str)."
    },
    {
      "id": 49,
      "text": "Что делает метод 'Array.from()'?",
      "hasOptions": false,
      "answer": "Создаёт массив из итерируемого или подобного массиву объекта."
    },
    {
      "id": 50,
      "text": "Что такое 'hoisting'?",
      "hasOptions": false,
      "answer": "Поднятие объявлений переменных и функций в верхнюю область видимости."
    },
    {
      "id": 51,
      "text": "Что делает метод 'forEach()'?",
      "hasOptions": false,
      "answer": "Выполняет переданную функцию один раз для каждого элемента массива без возврата значения."
    },
    {
      "id": 52,
      "text": "Что делает 'try...catch'?",
      "hasOptions": false,
      "answer": "Позволяет перехватывать и обрабатывать ошибки выполнения."
    },
    {
      "id": 53,
      "text": "Что такое прототипное наследование?",
      "hasOptions": false,
      "answer": "Механизм, при котором объекты могут наследовать свойства и методы от других объектов через цепочку прототипов."
    },
    {
      "id": 54,
      "text": "Что делает метод 'async/await'?",
      "hasOptions": false,
      "answer": "Позволяет писать асинхронный код, который выглядит как синхронный, ожидая выполнения промисов."
    }
  ],
  "vue": [
    {
      "id": 1,
      "text": "Что такое Vue.js?",
      "hasOptions": false,
      "answer": "Vue.js — это прогрессивный JavaScript-фреймворк для создания пользовательских интерфейсов."
    },
    {
      "id": 2,
      "text": "Как создаётся новый проект Vue с помощью CLI?",
      "hasOptions": false,
      "answer": "Командой 'vue create project-name' или 'npm init vue@latest' для Vue 3."
    },
    {
      "id": 3,
      "text": "Что делает директива v-if?",
      "hasOptions": false,
      "answer": "Условно отображает элемент в DOM, если выражение истинно."
    },
    {
      "id": 4,
      "text": "Чем отличается v-if от v-show?",
      "hasOptions": false,
      "answer": "v-if добавляет или удаляет элемент из DOM, а v-show только скрывает его через display: none."
    },
    {
      "id": 5,
      "text": "Что делает директива v-for?",
      "hasOptions": false,
      "answer": "Позволяет перебирать массивы или объекты и рендерить элемент для каждого значения."
    },
    {
      "id": 6,
      "text": "Как задать ключ элементу в цикле v-for?",
      "hasOptions": false,
      "answer": "С помощью атрибута :key, например :key=\"item.id\"."
    },
    {
      "id": 7,
      "text": "Для чего используется директива v-bind?",
      "hasOptions": false,
      "answer": "Для динамической привязки атрибутов или props к выражениям."
    },
    {
      "id": 8,
      "text": "Что делает директива v-model?",
      "hasOptions": false,
      "answer": "Создаёт двустороннюю привязку данных между переменной и элементом формы."
    },
    {
      "id": 9,
      "text": "Что делает директива v-on?",
      "hasOptions": false,
      "answer": "Добавляет обработчик событий, например v-on:click или @click."
    },
    {
      "id": 10,
      "text": "Что такое реактивность во Vue?",
      "hasOptions": false,
      "answer": "Это механизм, при котором изменения в данных автоматически обновляют DOM."
    },
    {
      "id": 11,
      "text": "Что делает функция ref()?",
      "hasOptions": false,
      "answer": "Создаёт реактивную ссылку на значение, доступную как ref.value."
    },
    {
      "id": 12,
      "text": "Чем отличается reactive() от ref()?",
      "hasOptions": false,
      "answer": "ref используется для примитивов, а reactive — для объектов и массивов."
    },
    {
      "id": 13,
      "text": "Что такое computed свойства?",
      "hasOptions": false,
      "answer": "Это вычисляемые свойства, которые кэшируются и пересчитываются только при изменении зависимостей."
    },
    {
      "id": 14,
      "text": "Для чего используется watch?",
      "hasOptions": false,
      "answer": "Для отслеживания изменений реактивных переменных и выполнения побочных действий."
    },
    {
      "id": 15,
      "text": "Что делает метод defineProps()?",
      "hasOptions": false,
      "answer": "Определяет входные параметры (props) компонента в script setup."
    },
    {
      "id": 16,
      "text": "Что делает defineEmits()?",
      "hasOptions": false,
      "answer": "Определяет события, которые компонент может испускать (emit)."
    },
    {
      "id": 17,
      "text": "Что такое слоты (slots) во Vue?",
      "hasOptions": false,
      "answer": "Это способ передачи содержимого от родительского компонента в дочерний через <slot>."
    },
    {
      "id": 18,
      "text": "Что делает scoped слот?",
      "hasOptions": false,
      "answer": "Позволяет передавать данные из дочернего компонента в содержимое слота родителя."
    },
    {
      "id": 19,
      "text": "Что такое provide/inject?",
      "hasOptions": false,
      "answer": "Это механизм передачи данных от родителя к потомкам без явных props."
    },
    {
      "id": 20,
      "text": "Что делает директива v-html?",
      "hasOptions": false,
      "answer": "Вставляет HTML-код в элемент, интерпретируя его как разметку (осторожно с XSS)."
    },
    {
      "id": 21,
      "text": "Как задать класс динамически?",
      "hasOptions": false,
      "answer": "С помощью :class=\"{ active: isActive }\" или :class=\"[classA, classB]\"."
    },
    {
      "id": 22,
      "text": "Как отследить жизненный цикл компонента?",
      "hasOptions": false,
      "answer": "С помощью хуков жизненного цикла, например onMounted(), onUpdated(), onUnmounted()."
    },
    {
      "id": 23,
      "text": "Что делает хук onMounted()?",
      "hasOptions": false,
      "answer": "Выполняет код после монтирования компонента в DOM."
    },
    {
      "id": 24,
      "text": "Какой хук используется перед удалением компонента?",
      "hasOptions": false,
      "answer": "onUnmounted()."
    },
    {
      "id": 25,
      "text": "Что делает компонент <Teleport>?",
      "hasOptions": false,
      "answer": "Позволяет рендерить дочерний элемент вне текущей иерархии DOM."
    },
    {
      "id": 26,
      "text": "Для чего используется <Suspense>?",
      "hasOptions": false,
      "answer": "Для отображения fallback-контента, пока загружается асинхронный компонент."
    },
    {
      "id": 27,
      "text": "Что делает директива v-once?",
      "hasOptions": false,
      "answer": "Рендерит элемент один раз без повторного обновления при изменении данных."
    },
    {
      "id": 28,
      "text": "Что делает директива v-memo (Vue 3.3+)?",
      "hasOptions": false,
      "answer": "Кэширует рендер компонента, если не изменились указанные зависимости."
    },
    {
      "id": 29,
      "text": "Что делает keep-alive?",
      "hasOptions": false,
      "answer": "Кэширует компонент, чтобы при повторном показе не пересоздавать его заново."
    },
    {
      "id": 30,
      "text": "Как передать данные из дочернего компонента в родительский?",
      "hasOptions": false,
      "answer": "Через emit события и прослушивание в родителе (например: @update=\"handler\")."
    },
    {
      "id": 31,
      "text": "Что делает функция nextTick()?",
      "hasOptions": false,
      "answer": "Позволяет выполнить код после обновления DOM Vue."
    },
    {
      "id": 32,
      "text": "Что такое Pinia?",
      "hasOptions": false,
      "answer": "Это официальная система управления состоянием для Vue 3, замена Vuex."
    },
    {
      "id": 33,
      "text": "Как импортировать composable-функцию?",
      "hasOptions": false,
      "answer": "Обычно из папки composables: import { useUser } from '@/composables/useUser'."
    },
    {
      "id": 34,
      "text": "Что делает defineExpose()?",
      "hasOptions": false,
      "answer": "Позволяет явно указать, какие свойства и методы доступны родителю при использовании ref."
    },
    {
      "id": 35,
      "text": "Что делает <script setup>?",
      "hasOptions": false,
      "answer": "Это упрощённый синтаксис для Composition API, автоматически делает импортируемые переменные доступными в шаблоне."
    },
    {
      "id": 36,
      "text": "Чем отличается Options API от Composition API?",
      "hasOptions": false,
      "answer": "Options API использует объект с полями data, methods, computed, а Composition API — функции и хуки внутри setup()."
    },
    {
      "id": 37,
      "text": "Как подключить роутер в проект Vue?",
      "hasOptions": false,
      "answer": "Через Vue Router: создаётся routes.js, импортируется createRouter и используется в createApp(app).use(router)."
    },
    {
      "id": 38,
      "text": "Как создать глобальный компонент?",
      "hasOptions": false,
      "answer": "Зарегистрировать его через app.component('Имя', Компонент)."
    },
    {
      "id": 39,
      "text": "Как использовать provide/inject с типами в TypeScript?",
      "hasOptions": false,
      "answer": "Передавать типы через дженерики, например provide<MyType>('key', data) и inject<MyType>('key')."
    },
    {
      "id": 40,
      "text": "Как можно оптимизировать производительность Vue-приложения?",
      "hasOptions": false,
      "answer": "Использовать lazy loading, keep-alive, memo, computed, v-once, динамический импорт и отслеживать ререндеры через devtools."
    }
  ]
}
